function strct = ge_read_image_header(pfile_name,offset, byte_order)

if(nargin == 0)
	[file, path] = uigetfile('*.*', 'Select Pfile');
	pfile_name = strcat(path, file);
	offset = 0; %Assume no offset
	byte_order = 'ieee-le'; %Assume little endian
end

% Open the PFile
fid=fopen(pfile_name,'r',byte_order);         %Little-Endian format
if (fid == -1)
	error(sprintf('Could not open %s file.',pfile_name));
end

% start at correct offset
fseek(fid,offset,'bof');

strct = struct('base_p_file',pfile_name);
strct = setfield(strct, 'double_padding', fread(fid,8,'double',byte_order)); % Please use this if you are adding any doubles
strct = setfield(strct, 'dfov', fread(fid,1,'float32',byte_order)); % Display field of view - X (mm)
strct = setfield(strct, 'dfov_rect', fread(fid,1,'float32',byte_order)); % Display field of view - Y (if different)
strct = setfield(strct, 'sctime', fread(fid,1,'float32',byte_order)); % Duration of scan
strct = setfield(strct, 'slthick', fread(fid,1,'float32',byte_order)); % Slice Thickness (mm)
strct = setfield(strct, 'scanspacing', fread(fid,1,'float32',byte_order)); % Spacing between scans (mm?)
strct = setfield(strct, 'loc', fread(fid,1,'float32',byte_order)); % Image location
strct = setfield(strct, 'tbldlta', fread(fid,1,'float32',byte_order)); % Table Delta
strct = setfield(strct, 'nex', fread(fid,1,'float32',byte_order)); % Number of Excitations
strct = setfield(strct, 'reptime', fread(fid,1,'float32',byte_order)); % Cardiac repetition time
strct = setfield(strct, 'saravg', fread(fid,1,'float32',byte_order)); % Average SAR
strct = setfield(strct, 'sarpeak', fread(fid,1,'float32',byte_order)); % Peak SAR
strct = setfield(strct, 'pausetime', fread(fid,1,'float32',byte_order)); % Pause Time
strct = setfield(strct, 'vbw', fread(fid,1,'float32',byte_order)); % Variable Bandwidth (Hz)
strct = setfield(strct, 'user0', fread(fid,1,'float32',byte_order)); % User Variable 0
strct = setfield(strct, 'user1', fread(fid,1,'float32',byte_order)); % User Variable 1
strct = setfield(strct, 'user2', fread(fid,1,'float32',byte_order)); % User Variable 2
strct = setfield(strct, 'user3', fread(fid,1,'float32',byte_order)); % User Variable 3
strct = setfield(strct, 'user4', fread(fid,1,'float32',byte_order)); % User Variable 4
strct = setfield(strct, 'user5', fread(fid,1,'float32',byte_order)); % User Variable 5
strct = setfield(strct, 'user6', fread(fid,1,'float32',byte_order)); % User Variable 6
strct = setfield(strct, 'user7', fread(fid,1,'float32',byte_order)); % User Variable 7
strct = setfield(strct, 'user8', fread(fid,1,'float32',byte_order)); % User Variable 8
strct = setfield(strct, 'user9', fread(fid,1,'float32',byte_order)); % User Variable 9
strct = setfield(strct, 'user10', fread(fid,1,'float32',byte_order)); % User Variable 10
strct = setfield(strct, 'user11', fread(fid,1,'float32',byte_order)); % User Variable 11
strct = setfield(strct, 'user12', fread(fid,1,'float32',byte_order)); % User Variable 12
strct = setfield(strct, 'user13', fread(fid,1,'float32',byte_order)); % User Variable 13
strct = setfield(strct, 'user14', fread(fid,1,'float32',byte_order)); % User Variable 14
strct = setfield(strct, 'user15', fread(fid,1,'float32',byte_order)); % User Variable 15
strct = setfield(strct, 'user16', fread(fid,1,'float32',byte_order)); % User Variable 16
strct = setfield(strct, 'user17', fread(fid,1,'float32',byte_order)); % User Variable 17
strct = setfield(strct, 'user18', fread(fid,1,'float32',byte_order)); % User Variable 18
strct = setfield(strct, 'user19', fread(fid,1,'float32',byte_order)); % User Variable 19
strct = setfield(strct, 'user20', fread(fid,1,'float32',byte_order)); % User Variable 20
strct = setfield(strct, 'user21', fread(fid,1,'float32',byte_order)); % User Variable 21
strct = setfield(strct, 'user22', fread(fid,1,'float32',byte_order)); % User Variable 22
strct = setfield(strct, 'proj_ang', fread(fid,1,'float32',byte_order)); % Projection Angle
strct = setfield(strct, 'concat_sat', fread(fid,1,'float32',byte_order)); % Concat Sat Type Flag
strct = setfield(strct, 'user23', fread(fid,1,'float32',byte_order)); % User Variable 23
strct = setfield(strct, 'user24', fread(fid,1,'float32',byte_order)); % User Variable 24
strct = setfield(strct, 'x_axis_rot', fread(fid,1,'float32',byte_order)); % X Axis Rotation
strct = setfield(strct, 'y_axis_rot', fread(fid,1,'float32',byte_order)); % Y Axis Rotation
strct = setfield(strct, 'z_axis_rot', fread(fid,1,'float32',byte_order)); % Z Axis Rotation
strct = setfield(strct, 'ihtagfa', fread(fid,1,'float32',byte_order)); % Tagging Flip Angle
strct = setfield(strct, 'ihtagor', fread(fid,1,'float32',byte_order)); % Cardiac Tagging Orientation
strct = setfield(strct, 'ihbspti', fread(fid,1,'float32',byte_order)); % Blood Suppression TI
strct = setfield(strct, 'rtia_timer', fread(fid,1,'float32',byte_order)); % Float Slop Field 4
strct = setfield(strct, 'fps', fread(fid,1,'float32',byte_order)); % Float Slop Field 5
strct = setfield(strct, 'vencscale', fread(fid,1,'float32',byte_order)); % Scale Weighted Venc
strct = setfield(strct, 'dbdt', fread(fid,1,'float32',byte_order)); % peak rate of change of gradient field, tesla/sec
strct = setfield(strct, 'dbdtper', fread(fid,1,'float32',byte_order)); % limit in units of percent of theoretical curve
strct = setfield(strct, 'estdbdtper', fread(fid,1,'float32',byte_order)); % PSD estimated limit in units of percent
strct = setfield(strct, 'estdbdtts', fread(fid,1,'float32',byte_order)); % PSD estimated limit in Teslas/sec
strct = setfield(strct, 'saravghead', fread(fid,1,'float32',byte_order)); % Avg head SAR
strct = setfield(strct, 'neg_scanspacing', fread(fid,1,'float32',byte_order)); % Negative scan spacing for overlap slices
strct = setfield(strct, 'user25', fread(fid,1,'float32',byte_order)); % User Variable 25
strct = setfield(strct, 'user26', fread(fid,1,'float32',byte_order)); % User Variable 26
strct = setfield(strct, 'user27', fread(fid,1,'float32',byte_order)); % User Variable 27
strct = setfield(strct, 'user28', fread(fid,1,'float32',byte_order)); % User Variable 28
strct = setfield(strct, 'user29', fread(fid,1,'float32',byte_order)); % User Variable 29
strct = setfield(strct, 'user30', fread(fid,1,'float32',byte_order)); % User Variable 30
strct = setfield(strct, 'user31', fread(fid,1,'float32',byte_order)); % User Variable 31
strct = setfield(strct, 'user32', fread(fid,1,'float32',byte_order)); % User Variable 32
strct = setfield(strct, 'user33', fread(fid,1,'float32',byte_order)); % User Variable 33
strct = setfield(strct, 'user34', fread(fid,1,'float32',byte_order)); % User Variable 34
strct = setfield(strct, 'user35', fread(fid,1,'float32',byte_order)); % User Variable 35
strct = setfield(strct, 'user36', fread(fid,1,'float32',byte_order)); % User Variable 36
strct = setfield(strct, 'user37', fread(fid,1,'float32',byte_order)); % User Variable 37
strct = setfield(strct, 'user38', fread(fid,1,'float32',byte_order)); % User Variable 38
strct = setfield(strct, 'user39', fread(fid,1,'float32',byte_order)); % User Variable 39
strct = setfield(strct, 'user40', fread(fid,1,'float32',byte_order)); % User Variable 40
strct = setfield(strct, 'user41', fread(fid,1,'float32',byte_order)); % User Variable 41
strct = setfield(strct, 'user42', fread(fid,1,'float32',byte_order)); % User Variable 42
strct = setfield(strct, 'user43', fread(fid,1,'float32',byte_order)); % User Variable 43
strct = setfield(strct, 'user44', fread(fid,1,'float32',byte_order)); % User Variable 44
strct = setfield(strct, 'user45', fread(fid,1,'float32',byte_order)); % User Variable 45
strct = setfield(strct, 'user46', fread(fid,1,'float32',byte_order)); % User Variable 46
strct = setfield(strct, 'user47', fread(fid,1,'float32',byte_order)); % User Variable 47
strct = setfield(strct, 'user48', fread(fid,1,'float32',byte_order)); % User Variable 48
strct = setfield(strct, 'RegressorVal', fread(fid,1,'float32',byte_order));
strct = setfield(strct, 'SliceAsset', fread(fid,1,'float32',byte_order)); % Slice Asset in Asset Screen 
strct = setfield(strct, 'PhaseAsset', fread(fid,1,'float32',byte_order)); % Phase Asset in Asset Screen 
strct = setfield(strct, 'sarValues', fread(fid,4,'float32',byte_order)); % correspoding SAR values for defined terms 
strct = setfield(strct, 'shim_fov', fread(fid,2,'float32',byte_order));
strct = setfield(strct, 'shim_ctr_R', fread(fid,2,'float32',byte_order));
strct = setfield(strct, 'shim_ctr_A', fread(fid,2,'float32',byte_order));
strct = setfield(strct, 'shim_ctr_S', fread(fid,2,'float32',byte_order));
strct = setfield(strct, 'dim_X', fread(fid,1,'float32',byte_order)); % Image dimension - X
strct = setfield(strct, 'dim_Y', fread(fid,1,'float32',byte_order)); % Image dimension - Y
strct = setfield(strct, 'pixsize_X', fread(fid,1,'float32',byte_order)); % Image pixel size - X
strct = setfield(strct, 'pixsize_Y', fread(fid,1,'float32',byte_order)); % Image pixel size - Y
strct = setfield(strct, 'ctr_R', fread(fid,1,'float32',byte_order)); % Center R coord of plane image
strct = setfield(strct, 'ctr_A', fread(fid,1,'float32',byte_order)); % Center A coord of plane image
strct = setfield(strct, 'ctr_S', fread(fid,1,'float32',byte_order)); % Center S coord of plane image
strct = setfield(strct, 'norm_R', fread(fid,1,'float32',byte_order)); % Normal R coord
strct = setfield(strct, 'norm_A', fread(fid,1,'float32',byte_order)); % Normal A coord
strct = setfield(strct, 'norm_S', fread(fid,1,'float32',byte_order)); % Normal S coord
strct = setfield(strct, 'tlhc_R', fread(fid,1,'float32',byte_order)); % R Coord of Top Left Hand Corner
strct = setfield(strct, 'tlhc_A', fread(fid,1,'float32',byte_order)); % A Coord of Top Left Hand Corner
strct = setfield(strct, 'tlhc_S', fread(fid,1,'float32',byte_order)); % S Coord of Top Left Hand Corner
strct = setfield(strct, 'trhc_R', fread(fid,1,'float32',byte_order)); % R Coord of Top Right Hand Corner
strct = setfield(strct, 'trhc_A', fread(fid,1,'float32',byte_order)); % A Coord of Top Right Hand Corner
strct = setfield(strct, 'trhc_S', fread(fid,1,'float32',byte_order)); % S Coord of Top Right Hand Corner
strct = setfield(strct, 'brhc_R', fread(fid,1,'float32',byte_order)); % R Coord of Bottom Right Hand Corner
strct = setfield(strct, 'brhc_A', fread(fid,1,'float32',byte_order)); % A Coord of Bottom Right Hand Corner
strct = setfield(strct, 'brhc_S', fread(fid,1,'float32',byte_order)); % S Coord of Bottom Right Hand Corner
strct = setfield(strct, 'float_padding', fread(fid,32,'float32',byte_order)); % Please use this if you are adding any floats
strct = setfield(strct, 'cal_fldstr', fread(fid,1,'uint32',byte_order)); % Calibrated Field Strength (x10 uGauss)
strct = setfield(strct, 'im_checksum', fread(fid,1,'uint32',byte_order)); % AcqRecon record checksum
strct = setfield(strct, 'user_usage_tag', fread(fid,1,'uint32',byte_order)); % Defines how following user CVs are to be filled in
%                                                   /*Default value = 0x00000000*/
%                                                   /*GE range = 0x00000001 - 0x7fffffff*/
%                                                   /*Research = 0x80000000 - 0xffffffff*/
strct = setfield(strct, 'user_fill_mapMSW', fread(fid,1,'uint32',byte_order)); % Define what process fills in the user CVs, ifcc or TIR
strct = setfield(strct, 'user_fill_mapLSW', fread(fid,1,'uint32',byte_order)); % Define what process fills in the user CVs, ifcc or TIR
strct = setfield(strct, 'im_archived', fread(fid,1,'int32',byte_order)); % Image Archive Flag
strct = setfield(strct, 'im_complete', fread(fid,1,'int32',byte_order)); % Image Complete Flag
strct = setfield(strct, 'long_padding', fread(fid,8,'int32',byte_order)); % Please use this if you are adding any longs
strct = setfield(strct, 'im_datetime', fread(fid,1,'int32',byte_order)); % Allocation Image date/time stamp
strct = setfield(strct, 'im_actual_dt', fread(fid,1,'int32',byte_order)); % Actual Image date/time stamp
strct = setfield(strct, 'tr', fread(fid,1,'int32',byte_order)); % Pulse repetition time(usec)
strct = setfield(strct, 'ti', fread(fid,1,'int32',byte_order)); % Pulse inversion time(usec)
strct = setfield(strct, 'te', fread(fid,1,'int32',byte_order)); % Pulse echo time(usec)
strct = setfield(strct, 'te2', fread(fid,1,'int32',byte_order)); % Second echo echo (usec)
strct = setfield(strct, 'tdel', fread(fid,1,'int32',byte_order)); % Delay time after trigger (msec)
strct = setfield(strct, 'mindat', fread(fid,1,'int32',byte_order)); % Minimum Delay after Trigger (uSec)
strct = setfield(strct, 'obplane', fread(fid,1,'int32',byte_order)); % Oblique Plane
strct = setfield(strct, 'slocfov', fread(fid,1,'int32',byte_order)); % Slice Offsets on Freq axis
strct = setfield(strct, 'obsolete1', fread(fid,1,'int32',byte_order)); % Center Frequency (0.1 Hz)
strct = setfield(strct, 'obsolete2', fread(fid,1,'int32',byte_order)); % Auto Center Frequency (0.1 Hz)
strct = setfield(strct, 'user_bitmap', fread(fid,1,'int32',byte_order)); % Bitmap defining user CVs
strct = setfield(strct, 'iopt', fread(fid,1,'int32',byte_order)); % Imaging Options
strct = setfield(strct, 'psd_datetime', fread(fid,1,'int32',byte_order)); % PSD Creation Date and Time
strct = setfield(strct, 'rawrunnum', fread(fid,1,'int32',byte_order)); % RawData Run Number
strct = setfield(strct, 'intr_del', fread(fid,1,'int32',byte_order)); % Interimage/interloc delay (uSec)
strct = setfield(strct, 'im_lastmod', fread(fid,1,'int32',byte_order)); % Date/Time of Last Change
strct = setfield(strct, 'im_pds_a', fread(fid,1,'int32',byte_order)); % PixelData size - as stored
strct = setfield(strct, 'im_pds_c', fread(fid,1,'int32',byte_order)); % PixelData size - Compressed
strct = setfield(strct, 'im_pds_u', fread(fid,1,'int32',byte_order)); % PixelData size - UnCompressed
strct = setfield(strct, 'thresh_min1', fread(fid,1,'int32',byte_order)); % Lower Range of Pixels 1
strct = setfield(strct, 'thresh_max1', fread(fid,1,'int32',byte_order)); % Upper Range of Pixels 1
strct = setfield(strct, 'thresh_min2', fread(fid,1,'int32',byte_order)); % Lower Range of Pixels 2
strct = setfield(strct, 'thresh_max2', fread(fid,1,'int32',byte_order)); % Upper Range of Pixels 2
strct = setfield(strct, 'numslabs', fread(fid,1,'int32',byte_order)); % Number of 3D Slabs
strct = setfield(strct, 'locsperslab', fread(fid,1,'int32',byte_order)); % Slice Locs Per 3D Slab
strct = setfield(strct, 'overlaps', fread(fid,1,'int32',byte_order)); % # of Slice Locs on Each Slab Which Overlap N eighbors
strct = setfield(strct, 'slop_int_4', fread(fid,1,'int32',byte_order)); % Image Filtering 0.5/0.2T
strct = setfield(strct, 'dfax', fread(fid,1,'int32',byte_order)); % Diffusion Direction for DW-EPI 
strct = setfield(strct, 'fphase', fread(fid,1,'int32',byte_order)); % Number Of Phases
strct = setfield(strct, 'offsetfreq', fread(fid,1,'int32',byte_order)); % Offset Frequency - Mag.Transfer
strct = setfield(strct, 'b_value', fread(fid,1,'int32',byte_order)); % B-value for DW-EPI
strct = setfield(strct, 'iopt2', fread(fid,1,'int32',byte_order)); % Imaging Option2
strct = setfield(strct, 'ihtagging', fread(fid,1,'int32',byte_order)); % tag type 
strct = setfield(strct, 'ihtagspc', fread(fid,1,'int32',byte_order)); % tag space 
strct = setfield(strct, 'ihfcineim', fread(fid,1,'int32',byte_order)); % Fast CINE interpolation method
strct = setfield(strct, 'ihfcinent', fread(fid,1,'int32',byte_order)); % Fast CINE normalization type
strct = setfield(strct, 'num_seg', fread(fid,1,'int32',byte_order)); % YMSge05074
strct = setfield(strct, 'oprtarr', fread(fid,1,'int32',byte_order)); % Respiratory Trigger windo
strct = setfield(strct, 'averages', fread(fid,1,'int32',byte_order)); % Number of averages for spectro
strct = setfield(strct, 'station_index', fread(fid,1,'int32',byte_order)); % Station Index
strct = setfield(strct, 'station_total', fread(fid,1,'int32',byte_order)); % Station Total
strct = setfield(strct, 'iopt3', fread(fid,1,'int32',byte_order)); % Imaging Option3
strct = setfield(strct, 'delAcq', fread(fid,1,'int32',byte_order)); % Delay after Acquisition (MP / fMRI screen) 
strct = setfield(strct, 'rxmbloblen', fread(fid,1,'int32',byte_order)); % fMRI: RXM blob size 
strct = setfield(strct, 'rxmblob', fread(fid,1,'int32',byte_order)); % When moving to 64 bit OS move this to top of the struct as it shall be 8 bytes 
strct = setfield(strct, 'int_padding', fread(fid,32,'int32',byte_order)); % Please use this if you are adding any ints
strct = setfield(strct, 'imatrix_X', fread(fid,1,'int16',byte_order)); % Image matrix size - X
strct = setfield(strct, 'imatrix_Y', fread(fid,1,'int16',byte_order)); % Image matrix size - Y
strct = setfield(strct, 'im_exno', fread(fid,1,'uint16',byte_order)); % Exam number for this image
strct = setfield(strct, 'img_window', fread(fid,1,'uint16',byte_order)); % Window Value
strct = setfield(strct, 'img_level', fread(fid,1,'int16',byte_order)); % Level Value
strct = setfield(strct, 'numecho', fread(fid,1,'int16',byte_order)); % Number of echoes
strct = setfield(strct, 'echonum', fread(fid,1,'int16',byte_order)); % Echo Number
strct = setfield(strct, 'im_uniq', fread(fid,1,'int16',byte_order)); % The Make-Unique Flag
strct = setfield(strct, 'im_seno', fread(fid,1,'int16',byte_order)); % Series Number for this image
strct = setfield(strct, 'im_no', fread(fid,1,'int16',byte_order)); % Image Number
strct = setfield(strct, 'contmode', fread(fid,1,'int16',byte_order)); % Image Contrast Mode
strct = setfield(strct, 'serrx', fread(fid,1,'int16',byte_order)); % Series from which prescribed
strct = setfield(strct, 'imgrx', fread(fid,1,'int16',byte_order)); % Image from which prescribed
strct = setfield(strct, 'screenformat', fread(fid,1,'int16',byte_order)); % Screen Format(8/16 bit)
strct = setfield(strct, 'plane', fread(fid,1,'int16',byte_order)); % Plane Type
strct = setfield(strct, 'im_compress', fread(fid,1,'int16',byte_order)); % Image compression type for allocation
strct = setfield(strct, 'im_scouttype', fread(fid,1,'int16',byte_order)); % Scout Type (AP or lateral)
strct = setfield(strct, 'contig', fread(fid,1,'int16',byte_order)); % Continuous Slices Flag
strct = setfield(strct, 'hrtrate', fread(fid,1,'int16',byte_order)); % Cardiac Heart Rate (bpm)
strct = setfield(strct, 'trgwindow', fread(fid,1,'int16',byte_order)); % Trigger window (% of R-R interval)
strct = setfield(strct, 'imgpcyc', fread(fid,1,'int16',byte_order)); % Images per cardiac cycle
strct = setfield(strct, 'obsolete3', fread(fid,1,'int16',byte_order)); % Actual Transmit Gain (.1 db)
strct = setfield(strct, 'obsolete4', fread(fid,1,'int16',byte_order)); % Actual Receive Gain Analog (.1 db)
strct = setfield(strct, 'obsolete5', fread(fid,1,'int16',byte_order)); % Actual Receive Gain Digital (.1 db)
strct = setfield(strct, 'mr_flip', fread(fid,1,'int16',byte_order)); % Flip Angle for GRASS scans (deg.)
strct = setfield(strct, 'cphase', fread(fid,1,'int16',byte_order)); % Total Cardiac Phase prescribed
strct = setfield(strct, 'swappf', fread(fid,1,'int16',byte_order)); % Swap Phase/Frequency Axis
strct = setfield(strct, 'pauseint', fread(fid,1,'int16',byte_order)); % Pause Interval (slices)
strct = setfield(strct, 'obsolete6', fread(fid,1,'int16',byte_order)); % Auto Transmit Gain (0.1 dB)
strct = setfield(strct, 'obsolete7', fread(fid,1,'int16',byte_order)); % PreScan R1 - Analog
strct = setfield(strct, 'obsolete8', fread(fid,1,'int16',byte_order)); % PreScan R2 - Digital
strct = setfield(strct, 'not_used_1', fread(fid,1,'int16',byte_order)); % Available for use 
strct = setfield(strct, 'imode', fread(fid,1,'int16',byte_order)); % Imaging Mode
strct = setfield(strct, 'pseq', fread(fid,1,'int16',byte_order)); % Pulse Sequence
strct = setfield(strct, 'pseqmode', fread(fid,1,'int16',byte_order)); % Pulse Sequence Mode
strct = setfield(strct, 'unused_monsar', fread(fid,1,'int16',byte_order)); % Monitor SAR flag No longer is use 
strct = setfield(strct, 'ctyp', fread(fid,1,'int16',byte_order)); % Coil Type
strct = setfield(strct, 'surfctyp', fread(fid,1,'int16',byte_order)); % Surface Coil Type
strct = setfield(strct, 'surfcext', fread(fid,1,'int16',byte_order)); % Extremity Coil Flag
strct = setfield(strct, 'supp_tech', fread(fid,1,'int16',byte_order)); % SAT fat/water/none
strct = setfield(strct, 'slquant', fread(fid,1,'int16',byte_order)); % Number of slices in this scan group
strct = setfield(strct, 'gpre', fread(fid,1,'int16',byte_order)); % Graphically prescribed
strct = setfield(strct, 'satbits', fread(fid,1,'int16',byte_order)); % Bitmap of SAT selections
strct = setfield(strct, 'scic', fread(fid,1,'int16',byte_order)); % Surface Coil Intensity Correction Flag
strct = setfield(strct, 'satxloc1', fread(fid,1,'int16',byte_order)); % R-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satxloc2', fread(fid,1,'int16',byte_order)); % L-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satyloc1', fread(fid,1,'int16',byte_order)); % A-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satyloc2', fread(fid,1,'int16',byte_order)); % P-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satzloc1', fread(fid,1,'int16',byte_order)); % S-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satzloc2', fread(fid,1,'int16',byte_order)); % I-side SAT pulse loc rel to lndmrk
strct = setfield(strct, 'satxthick', fread(fid,1,'int16',byte_order)); % Thickness of X-axis SAT pulse
strct = setfield(strct, 'satythick', fread(fid,1,'int16',byte_order)); % Thickness of Y-axis SAT pulse
strct = setfield(strct, 'satzthick', fread(fid,1,'int16',byte_order)); % Thickness of Z-axis SAT pulse
strct = setfield(strct, 'flax', fread(fid,1,'int16',byte_order)); % Phase contrast flow axis
strct = setfield(strct, 'venc', fread(fid,1,'int16',byte_order)); % Phase contrast velocity encoding
strct = setfield(strct, 'thk_disclmr', fread(fid,1,'int16',byte_order)); % Slice Thickness
strct = setfield(strct, 'obsolete9', fread(fid,1,'int16',byte_order)); % Auto/Manual Prescan flag
strct = setfield(strct, 'obsolete10', fread(fid,1,'int16',byte_order)); % Bitmap of changed values
strct = setfield(strct, 'image_type', fread(fid,1,'int16',byte_order)); % Magnitude, Phase, Imaginary, or Real
strct = setfield(strct, 'vas_collapse', fread(fid,1,'int16',byte_order)); % Collapse Image
strct = setfield(strct, 'proj_alg', fread(fid,1,'int16',byte_order)); % Projection Algorithm
strct = setfield(strct, 'echo_trn_len', fread(fid,1,'int16',byte_order)); % Echo Train Length for Fast Spin Echo
strct = setfield(strct, 'frac_echo', fread(fid,1,'int16',byte_order)); % Fractional Echo - Effective TE Flag
strct = setfield(strct, 'prep_pulse', fread(fid,1,'int16',byte_order)); % Preporatory Pulse Option
strct = setfield(strct, 'cphasenum', fread(fid,1,'int16',byte_order)); % Cardiac Phase Number
strct = setfield(strct, 'var_echo', fread(fid,1,'int16',byte_order)); % Variable Echo Flag
strct = setfield(strct, 'scanactno', fread(fid,1,'int16',byte_order)); % Scan Acquisition Number
strct = setfield(strct, 'vasflags', fread(fid,1,'int16',byte_order)); % Magnitude Weighting Flag
strct = setfield(strct, 'integrity', fread(fid,1,'int16',byte_order)); % GE Image Integrity
strct = setfield(strct, 'freq_dir', fread(fid,1,'int16',byte_order)); % Frequency Direction
strct = setfield(strct, 'vas_mode', fread(fid,1,'int16',byte_order)); % Vascular Mode
strct = setfield(strct, 'hole', fread(fid,1,'int16',byte_order));
strct = setfield(strct, 'pscopts', fread(fid,1,'int16',byte_order)); % bitmap of prescan options
strct = setfield(strct, 'obsolete11', fread(fid,1,'int16',byte_order)); % gradient offset in X-direction
strct = setfield(strct, 'obsolete12', fread(fid,1,'int16',byte_order)); % gradient offset in Y-direction
strct = setfield(strct, 'obsolete13', fread(fid,1,'int16',byte_order)); % gradient offset in Z-direction
strct = setfield(strct, 'unoriginal', fread(fid,1,'int16',byte_order)); % identifies image as original or unoriginal
strct = setfield(strct, 'interleaves', fread(fid,1,'int16',byte_order)); % number of EPI shots
strct = setfield(strct, 'effechospace', fread(fid,1,'int16',byte_order)); % effective echo spacing for EPI
strct = setfield(strct, 'viewsperseg', fread(fid,1,'int16',byte_order)); % views per segment
strct = setfield(strct, 'rbpm', fread(fid,1,'int16',byte_order)); % respiratory rate, breaths per min
strct = setfield(strct, 'rtpoint', fread(fid,1,'int16',byte_order)); % respiratory trigger point as percent of max.
strct = setfield(strct, 'rcvrtype', fread(fid,1,'int16',byte_order)); % type of receiver used
strct = setfield(strct, 'sarMode', fread(fid,1,'int16',byte_order)); % Sar Ctrl Mode (Normal, 1st or 2nd) 
strct = setfield(strct, 'dBdtMode', fread(fid,1,'int16',byte_order)); % dBdt Ctrl Mode (Normal, 1st or 2nd) 
strct = setfield(strct, 'govBody', fread(fid,1,'int16',byte_order)); % Governing Body MHW/IEC/FDA  
strct = setfield(strct, 'sarDefinition', fread(fid,1,'int16',byte_order)); % Defined terms avaialble 
strct = setfield(strct, 'no_shimvol', fread(fid,1,'int16',byte_order));
strct = setfield(strct, 'shim_vol_type', fread(fid,1,'int16',byte_order));
strct = setfield(strct, 'current_phase', fread(fid,1,'int16',byte_order)); % Current Phase for this image (DP)
strct = setfield(strct, 'art_level', fread(fid,1,'int16',byte_order)); % Acoustic reduction level 
strct = setfield(strct, 'slice_group_number', fread(fid,1,'int16',byte_order)); % value 0=no group defined, 1=this slice belongs to group 1 and so on
strct = setfield(strct, 'number_of_slice_groups', fread(fid,1,'int16',byte_order)); % value 0=no groups defined, 1=total group is one and so on
strct = setfield(strct, 'show_in_autoview', fread(fid,1,'int16',byte_order)); % if 1 image will be displayed in auto view 
strct = setfield(strct, 'short_padding', fread(fid,32,'int16',byte_order)); % Please use this if you are adding any shorts
strct = setfield(strct, 'psdname', char(fread(fid,33,'char',byte_order))); % Pulse Sequence Name
strct = setfield(strct, 'proj_name', char(fread(fid,13,'char',byte_order))); % Projection Algorithm Name
strct = setfield(strct, 'psd_iname', char(fread(fid,13,'char',byte_order))); % PSD name from inside PSD
strct = setfield(strct, 'im_diskid', char(fread(fid,1,'char',byte_order))); % Disk ID for this Image
strct = setfield(strct, 'pdid', char(fread(fid,14,'char',byte_order))); % Pixel Data ID
strct = setfield(strct, 'im_suid', char(fread(fid,4,'char',byte_order))); % Suite id for this image
strct = setfield(strct, 'contrastIV', char(fread(fid,17,'char',byte_order))); % IV Contrast Agent
strct = setfield(strct, 'contrastOral', char(fread(fid,17,'char',byte_order))); % Oral Contrast Agent
strct = setfield(strct, 'loc_ras', char(fread(fid,1,'char',byte_order))); % RAS letter of image location
strct = setfield(strct, 'forimgrev', char(fread(fid,4,'char',byte_order))); % Foreign Image Revision
strct = setfield(strct, 'cname', char(fread(fid,17,'char',byte_order))); % Coil Name
strct = setfield(strct, 'im_verscre', char(fread(fid,2,'char',byte_order))); % Genesis Version - Created
strct = setfield(strct, 'im_verscur', char(fread(fid,2,'char',byte_order))); % Genesis Version - Now
strct = setfield(strct, 'im_alloc_key', char(fread(fid,13,'char',byte_order))); % 
strct = setfield(strct, 'ref_img', char(fread(fid,1,'char',byte_order))); % Reference Image Field
strct = setfield(strct, 'sum_img', char(fread(fid,1,'char',byte_order))); % Summary Image Field
strct = setfield(strct, 'filter_mode', char(fread(fid,16,'char',byte_order))); % String Slop Field 1
strct = setfield(strct, 'slop_str_2', char(fread(fid,16,'char',byte_order))); % String Slop Field 2
strct = setfield(strct, 'image_uid', char(fread(fid,32,'char',byte_order))); % Image Unique ID
strct = setfield(strct, 'sop_uid', char(fread(fid,32,'char',byte_order))); % Service Obj Class Unique ID
strct = setfield(strct, 'GEcname', char(fread(fid,24,'char',byte_order))); % GECoilname for the cname 
strct = setfield(strct, 'usedCoilData', char(fread(fid,100,'char',byte_order))); % Concatenated str of coilcode and chip serialID 
strct = setfield(strct, 'astcalseriesuid', char(fread(fid,32,'char',byte_order)));
strct = setfield(strct, 'purecalseriesuid', char(fread(fid,32,'char',byte_order)));
strct = setfield(strct, 'xml_psc_shm_vol', char(fread(fid,32,'char',byte_order)));
strct = setfield(strct, 'rxmpath', char(fread(fid,64,'char',byte_order)));
strct = setfield(strct, 'psdnameannot', char(fread(fid,33,'char',byte_order))); % Pulse Sequence Name Annotation 
strct = setfield(strct, 'img_hdr_padding', char(fread(fid,210,'char',byte_order)));

fclose(fid);
